

https://www.youtube.com/watch?v=BpPEoZW5IiY&t=10793s




### Ownership

1. Each value has an owner.
2. There can only be one owner at a time.
3. When the owner goes out of scope , the value will be dropped. {相当于退休了，要腾退办公室。或者完成任务后，向组织退回各种资源。}

到底什么是Owner？
The owner of a value is the variable or the data structure that holds it and is responsible for allocating and freeing the memory used to store that data.  {owner负责申请资源，并且完事后退回资源}


## Stack Memory
uknown size of data will be 分配到栈区但是在堆区有一个指针指向它。

## Copy ~ Move
1.  在 = 时
2.  在函数时

## 三种性质的函数
1、消耗性的函数
2、借用性的函数
3、复制性的函数

## 函数返回值的本质
就是在函数的局部空间内生成一个东西，返回给调用者

## 函数参数的本质
就是在函数的局部空间内，先生成几个对象，这些生成动作，可能导致对外层空间对象的掠夺。


### String   &str

1. A String is a heap-allocated string type that owns its contents and is mutable.
2. A &str is an immutable sequence of UTF-8 bytes in memory, it does not own the underlying data and is immutable.
3. Think of &str as a view on a sequence of characters (stored as UTF-8 bytes) in memory.

## String Literal
1. A string literal is a sequence of characters enclosed in double quotes("").
2. Fixed size, compile-time known sequence of UTF-8 bytes.
3. The type is  &'static str , which indicates the data is stored in static storage, meaning it is valid throught the entire lifetime of the program.
4. The data is hardcored into the executable and stored in read-only memory, meaning they are immutable.

## 
string literal 不就是 &str 类型吗？ string literal 与 string slice 到底有什么区别？

##
&str -> String ,  "hello".to_string()

## 有关的方法
.push('')  单引号，单个字符
.push("")  双引号，&str
.replace() 


## slice 
用处就是“借一部分”



### enum

Option 里面的
Some()是独立于 Option enum 存在的。


### methods and associated functions

In Rust, an associated function is a function that is associated with a type, rather than an instance of that type. It is similar to a static method in other programming languages. 
Associated functions are often used for constructors or other utility functions that do not need to operate on an instance of the type.



###  associated type
是对trait进行泛型的另一种方法











###  lifetime

1. Another kind of generic ensuring that references are valid as long as needed
2. Every reference has a lifetime, which is the scope for which that reference is valid
3. Most of time implicit and inferred, don't need to worry
4. Sometimes lifetime annotations are needed, if the compiler can't infer it
5. Lifetime annotations is a concept which most other programming languages don't have

Main aim of lifetime is to prevent dangling references(also called dangling pointers)

The compiler uses lifetime to ensure all borrows are valid. 

#
fn main() {

  main scope

  {
      sub scope
  }

  {
      sub scope
  }


  {
    // reference 用后即弃？
    let x = 5;             //   ------ 'b
    let r = &x;            //   ---'a
    println!("r: {}", r)   //   ---'a
  }                        //   ------ 'b

  // rust compiler 要确保reference死在实体前面。

}

// lifetime标注符要和&紧紧连接，因为是reference的生命周期
// One input reference with lifetime 'a which must live at least as long as the function.
// reference要活得比function长
fn print_one<'a>(x: &'a i32) {
  println!("`print one`: x is {}", x);
}

// Mutable references are possible with lifetime as well.
fn add_one<'a>(x: &'a mut i32){
  *x += 1;
}

// Multiple elements with different lifetimes . In this case, it would be fine for both to have the same lifetime 'a, 
// but in more complex cases, different lifetimes may be required.
fn print_multi<'a, 'b>(x: &'a i32, y:&'b i32) {
  println!("`print_multi`: x is {}, y is {}", x, y);
}

// Returning references thar have been passed in is acceptable.  
// However, the correct lifetime must be returned.
fn pass_x<'a, 'b>(x: &'a i32, _: &'b i32) -> &'a i32 { 
  x 
}

fn main(){
    let x = 7;
    let y = 9;
    print_one(&x);
    print_multi(&x, &y);

    let z = pass_x(&x, &y);
    print_one(z);


}




#

fn longest(x: &str, y: &str) -> &str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let x: &str = "long";
    let y: &str = "longer";
}


#
// 'a must live longer than the function.
// function的本质是一个局部scope
fn invalid_output<'a>() -> &'a String {
    &String::from("foo")

}

# `print_refs` takes two references to `i32` which have different lifetimes `'a` and `'b` . These two lifetimes must both be at 
least as long as the function `print_refs`.
// 函数也可以是借用者，不仅仅用=借用
fn print_refs<'a, 'b>(x : &'a i32 , y: &'b i32) {
    println!("x is {} and y is {}", x, y);
}


