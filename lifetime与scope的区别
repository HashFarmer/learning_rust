
https://www.runoob.com/rust/rust-lifetime.html

lifetime 与 scope 有什么本质区别吗？

lifetime 是 reference 的scope？

///
{
    let r;

    {
        let x = 5;
        r = &x;
    }

    println!("r: {}", r);
}

///

fn main() {
    let r;
    {
        let s1 = "rust_long";
        r = &s1; //^^^ borrowed value does not live long enough
    }
    println!("{} is longer", r);
}

/// 可以执行

fn main() {
    let r;
    {
        let s1 = "rust";
        r = s1; //因为没有borrow？
    }
    println!("{} is longer", r);
}

///

fn main() {
    let r;
    {
        let s1 = 123;
        r = &s1; //不带&可以执行，带&无法执行
    }
    println!("{} is longer", r);
}


///1、 下面可以执行

fn longer(s: &str) -> &str {
    s
}

fn main() {
    let r;
    {
        let s1 = "rust";
        r = longer(s1);
    }
    println!("{} is longer", r);
}


///2、 运行不了，为什么？与（1、）的区别在哪里？

fn longest_word(x: &String) -> &String {
    x
}

fn main() {
    let result;
    {
        let magic1 = String::from("abracadabra!");
        result = longest_word(&magic1);// borrowed value does not live long enough
    }
    println!("The longest magic word is {}", result);
}

///3、依然无法运行，说明 生命周期标注并不能 延长生存周期
fn longest_word<'a>(x: &'a String) -> &'a String {
    x
}

fn main() {
    let result;
    {
        let magic1 = String::from("abracadabra!");
        result = longest_word(&magic1);// borrowed value does not live long enough
    }
    println!("The longest magic word is {}", result);
}


/// 为什么加上生命周期标注就可以运行了？
// 仅仅是因为去除了歧义性？

fn longer<'a>(s1: &'a str, s2: &'a str) -> &'a str {
    if s2.len() > s1.len() {
        s2
    } else {
        s1
    }
}

fn main() {
    let r;
    {
        let s1 = "rust";
        let s2 = "ecmascript";
        r = longer(s1, s2);
    }
    println!("{} is longer", r);
}


/// 下面例子表明不在于函数返回值是引用才需要生命周期标注

fn main() {
    let magic1 = String::from("abracadabra!");
    let magic2 = String::from("shazam!");

    let result = longest_word(&magic1);
    println!("The longest magic word is {}", result);
}

fn longest_word(x: &String) -> &String {
    x
}
//
https://learn.microsoft.com/en-us/training/modules/rust-memory-management/3-validate-references-with-lifetimes

