
##  我感觉应该是有 “main thread” 与 “sub thread”的概念

use std::thread;
use std::time::Duration;

fn main() {
    // Define a closure representing a task for the first thread
    let handle1 = thread::spawn(|| {
        for i in 1..=5 {
            println!("Thread 1: {}", i);
            thread::sleep(Duration::from_millis(200));
        }
    });

    // Define a closure representing a task for the second thread
    let handle2 = thread::spawn(|| {
        for i in 1..=5 {
            println!("Thread 2: {}", i);
            thread::sleep(Duration::from_millis(300));
        }
    });

    // Wait for both threads to finish
    //handle1.join().unwrap();
    //handle2.join().unwrap();

    println!("In main thread! -1");

    thread::sleep(Duration::from_millis(1000));

    println!("In main thread! -2");
}



##  线程之间的“信息传送通道”

use std::thread;
use std::sync::mpsc;
use std::time::Duration;

fn main() {
    // Create a channel for communication between threads
    let (tx, rx) = mpsc::channel();

    // Create a new thread
    let handle = thread::spawn(move || {
        // Simulate some work
        thread::sleep(Duration::from_secs(2));

        // Send a message through the channel
        tx.send(42).unwrap();
    });

    // Wait for the message from the thread
    let received = rx.recv().unwrap();
    println!("Received from thread: {}", received);

    // Wait for the thread to finish
    handle.join().unwrap();
}
