trait 可以说是 “功能表”，或者说“要求”
impl 可以说是“实现” “功能表”，落实“要求”
struct 可以说是“类型”

trait Cook {
    fn start(&self);
}
trait Wash {
    fn start(&self);
}
struct Chef;
impl Cook for Chef {
    fn start(&self) { println!("Cook::start");}
}
impl Wash for Chef {
    fn start(&self) { println!("Wash::start");}
}
fn main() {
    let me = Chef;
    Cook::start(&me);
    Wash::start(&me);
}







每一个泛型参数都必须有一个trait bound ，可以理解为对泛型参数T的一种边界限制，T不是泛得无边无界的

// rust的泛型很笨，不会根据具体类型调用那个类型的方法

//如此，那些泛型参数<T>，你都要给它 impl 一些 trait





// 大写的Self是类型，小写的self是类型的一个实例

trait HasSquareRoot {
 fn sq_root(self) -> Self;
}
impl HasSquareRoot for f32 {
 fn sq_root(self) -> Self { f32::sqrt(self) }
}
impl HasSquareRoot for f64 {
 fn sq_root(self) -> Self { f64::sqrt(self) }
}



//====================
use std::fmt::Debug;

fn my_print<T : Debug>(x: T) {
    println!("The value is {:?}.", x);
}

fn main() {
    my_print("China");
    my_print(41_i32);
    my_print(true);
    my_print(['a', 'b', 'c'])
}









