

fn main() {
   //declare an array
   let a = [10,20,30];

   let mut iter = a.iter(); 
   // fetch an iterator object for the array
   println!("{:?}",iter);

   //fetch individual values from the iterator object
   println!("{:?}",iter.next());
   println!("{:?}",iter.next());
   println!("{:?}",iter.next());
   println!("{:?}",iter.next());
}


//
Illustration:iter()
The iter() function uses the concept of borrowing.
It returns a reference to each element of the collection, leaving the collection untouched and available for reuse after the loop.

//
Illustration - into_iter()
This function uses the concept of ownership. 
It moves values in the collection into an iter object, i.e., the collection is consumed and it is no longer available for reuse.

//
Illustration - for and iter_mut()
This function is like the iter() function. However, this function can modify elements within the collection.



