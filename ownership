
ownership: 变量 与 值 之间的关系，名与实之间的关系， 壳与肉之间的关系

[https://www.koderhq.com/tutorial/rust/ownership/]
What-is-ownership
The technical details of ownership are somewhat complex, but the concept is fairly simple. Simply put, ownership is the owner of a value.

First, let’s take a quick look at the ownership rules in Rust.

A variable is the owner of a value.
Only a single owner is allowed.
When the owner goes out of scope, the value is lost.

【https://www.tutorialspoint.com/rust/rust_ownership.htm】
Each value in Rust has a variable that is called owner of the value. 

Each value in Rust has a variable that is called owner of the value. Every data stored in Rust will have an owner associated with it. For example, in the syntax − let age = 30, age is the owner of the value 30.

Each data can have only one owner at a time.

Two variables cannot point to the same memory location. The variables will always be pointing to different memory locations.

Transferring Ownership
The ownership of value can be transferred by −

Assigning value of one variable to another variable.

Passing value to a function.

Returning value from a function.

1、

when a = b , "copy" or "move" 

    /*
    let mut a = 1;
    let mut _a = a;  // copy
    println!("{}", a);
    */

    /*
    let mut b = "abc";
    let mut _b = b; // copy
    println!("{}", b);
    */
    
    // copy within function    
    /*
    let a: i32 = 1;
    fn func(x: i32) -> i32 { x }
    func(a); // copy
    println!("{}", a); // ok
    */
    
    
    

    /*
    let mut c = vec![1, 2, 3, 4];
    let mut _c = c; // move
    //println!("{:?}", c);
    */

    /*
    let mut d = String::from("abc");
    let mut _d = d;  // move
    //println!("{:?}", d);
    */
    
    
    // move within function
    /*
    let s = String::from("hello");
    fn func(s1: String) -> String {s1};
    func(s); // move, s被转移给了一个临时变量s1，函数调用完毕后s1销毁了，s也没有了
    println!("{}", s); // error
    */
    
    


2、

when a = &b, "borrow"

    /*
    let mut a = 1;
    let a_ref = &a;
    println!("{}", a);
    */

    /*
    let mut c = vec![1, 2, 3, 4];
    let c_ref = &c;
    println!("{:?}", c);
    */

    /*
    let s = String::from("hello"); // s -> "hello"
    let s1 = &s;// s1 -> s -> heap区的"hello" ，对引用型变量的引用，java中貌似没有这个概念？
    */
    
    // borrow 的发生1、&a，2、函数中，borrow之间的冲突（“可变借用”与“不可变借用”的冲突）
    
    /*
    //=======================
    fn calculate_length(s: &String) -> usize { 
        s.len() 
    }
    
    let s1 = String::from("hello"); 
    
    let len = calculate_length(&s1); // 借用 within 函数
    
    println!("The length of '{}' is {}.", s1, len); 
    */
    

3\

fn main() {
    let mut x = vec![1, 2, 3];

    let y = &mut x; // mutable borrow of x

    println!("{}", x[2]);// error，因为由隐含的可变借用

    println!("{}", y[0]); // 本句后，y借用失效

    println!("{}", x[1]);// ok
}
