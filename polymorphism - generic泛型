实现同一个trait的struct之间是什么关系？



1、泛型struct

struct A<T>{
  x: T,
}

struct中的泛型参数T，是用来约束其中的字段的
而 T 也可以有约束，其约束是 trait



2、泛型函数

fn area<T>(r: T) -> T 
where T: std::ops::Mul<Output = T> + Copy
{
    r * r
}

fn main() {
    println!("{}", area(3));
    println!("{}", area(3.2));
}

可见在使用泛型函数的时候，并不需要指明T
但是在rust的随机函数生成时，为什么需要指明 ::<f32> 或 ::<f64>  ??



3、泛型函数一定要有trait bound 吗？

fn max<T:>(array: &[T]) -> T {
    let mut max_index = 0;
    let mut i = 1;
    while i < array.len() {
        if array[i] > array[max_index] {
            max_index = i;
        }
        i += 1;
    }
    array[max_index]
}

fn main() {
    let a = [2, 4, 6, 3, 1];
    println!("max = {}", max(&a));
}

4、如果不对参数执行操作，是不需要trait bound

// Library code
fn f<T>(ch: char, num1: T, num2: T) -> T {
    if ch == 'a' { num1 }
    else { num2 }
   }


fn main(){
    
    // Application code
    let a: i16 = f::<i16>('a', 37, 41);
    let b: f64 = f::<f64>('b', 37.2, 41.1);
    print!("{} {}", a, b);

}
